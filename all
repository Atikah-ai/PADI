11111111111111111
# Import Library
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr
import numpy as np

# Konfigurasi visualisasi
sns.set(style='whitegrid')
plt.rcParams['figure.figsize'] = (12, 6)

# ==============================
# 1. DATA CLEANING
# ==============================

# Contoh: Membaca data produksi padi
produksi = pd.read_csv("D:/Produksi Padi Menurut Bulanan 2024 2025.csv", delimiter=';', skiprows=1)
produksi = produksi.iloc[:, :2]
produksi.columns = ['Bulan', 'Produksi_GKG_JutaTon']
produksi['Produksi_GKG_JutaTon'] = produksi['Produksi_GKG_JutaTon'].str.replace(',', '.').astype(float)

# Membaca file Excel inflasi
inflasi_konsumen = pd.read_excel("D:/inflasi harga konsumen.xls", skiprows=3)
inflasi_umum = pd.read_excel("D:/inflasi-umum.xls", skiprows=3)

# ==============================
# 2. STATISTIKA DESKRIPTIF
# ==============================

# Statistik deskriptif produksi padi
print("Statistik Produksi Padi:")
print(produksi.describe())

# Statistik deskriptif inflasi
print("\nStatistik Inflasi Umum:")
print(inflasi_umum.describe())

# ==============================
# 3. ANALISIS KORELASI
# ==============================

# Gabungkan data produksi dan inflasi berdasarkan bulan
# (asumsi bahwa urutan baris sesuai dan bulan sinkron)
df_analisis = pd.concat([produksi['Produksi_GKG_JutaTon'], inflasi_konsumen.iloc[:len(produksi), 1]], axis=1)
df_analisis.columns = ['Produksi_GKG_JutaTon', 'Inflasi_Konsumen']

# Korelasi Pearson
corr, pval = pearsonr(df_analisis['Produksi_GKG_JutaTon'], df_analisis['Inflasi_Konsumen'])
print(f"Koefisien Korelasi: {corr:.2f}, p-value: {pval:.4f}")

# ==============================
# 4. ANALISIS TREN
# ==============================

# Plot tren produksi
plt.plot(produksi['Bulan'], produksi['Produksi_GKG_JutaTon'], marker='o', label='Produksi Padi')
plt.title("Tren Produksi Padi Bulanan (2025)")
plt.xlabel("Bulan")
plt.ylabel("Produksi (Juta Ton GKG)")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot tren inflasi
plt.plot(inflasi_konsumen.iloc[:len(produksi), 0], inflasi_konsumen.iloc[:len(produksi), 1], marker='s', color='red', label='Inflasi Konsumen')
plt.title("Tren Inflasi Konsumen Bulanan")
plt.xlabel("Bulan")
plt.ylabel("Inflasi (%)")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()
22222222222222222222222222222
# Gabungkan data produksi dan inflasi berdasarkan bulan
df_analisis = pd.concat([produksi['Produksi_GKG_JutaTon'], inflasi_konsumen.iloc[:len(produksi), 1]], axis=1)
df_analisis.columns = ['Produksi_GKG_JutaTon', 'Inflasi_Konsumen']

# ✅ Bersihkan data dari NaN/infs
df_analisis = df_analisis.dropna()

# Korelasi Pearson
corr, pval = pearsonr(df_analisis['Produksi_GKG_JutaTon'], df_analisis['Inflasi_Konsumen'])
print(f"Koefisien Korelasi: {corr:.2f}, p-value: {pval:.4f}")
333333333333333333333333333333333
# ==============================
# CLEANING LANJUTAN
# ==============================

# 1. CEK TIPE DATA
print("Tipe data setiap kolom:")
print(df_analisis.dtypes)

# 2. CEK NILAI KOSONG (NaN)
print("\nJumlah nilai kosong per kolom:")
print(df_analisis.isna().sum())

# 3. CEK DATA DUPLIKAT
duplikat = df_analisis.duplicated().sum()
print(f"\nJumlah baris duplikat: {duplikat}")
if duplikat > 0:
    df_analisis = df_analisis.drop_duplicates()
    print("Duplikat dihapus.")

# 4. CEK NILAI NEGATIF ATAU TAK MASUK AKAL
print("\nNilai minimum dan maksimum setiap kolom:")
print(df_analisis.describe())

# 5. DETEKSI OUTLIER DENGAN BOX PLOT
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
sns.boxplot(x=df_analisis['Produksi_GKG_JutaTon'])
plt.title('Outlier Produksi Padi')

plt.subplot(1, 2, 2)
sns.boxplot(x=df_analisis['Inflasi_Konsumen'])
plt.title('Outlier Inflasi Konsumen')

plt.tight_layout()
plt.show()

# 6. (Opsional) HAPUS OUTLIER dengan batas kuartil (jika ekstrem terlihat)
Q1 = df_analisis.quantile(0.25)
Q3 = df_analisis.quantile(0.75)
IQR = Q3 - Q1

# Filter hanya data dalam batas normal
df_analisis_no_outlier = df_analisis[~((df_analisis < (Q1 - 1.5 * IQR)) | (df_analisis > (Q3 + 1.5 * IQR))).any(axis=1)]

print(f"\nJumlah data setelah menghapus outlier: {len(df_analisis_no_outlier)}")
4444444444444444444444444444444444444
df_analisis_no_outlier.to_csv("D:/data_bersih_analisis.csv", index=False)
# Misalnya kamu sudah punya dataframe bernama df_analisis_no_outlier
# Pastikan dua kolom berikut memang ada di dataframe
X = df_analisis_no_outlier['Produksi_GKG_JutaTon']
y = df_analisis_no_outlier['Inflasi_Konsumen']
import statsmodels.api as sm
X_const = sm.add_constant(X)  # tambahkan intercept
model = sm.OLS(y, X_const).fit()
print(model.summary())
555555555555555555555
import matplotlib.pyplot as plt

merged.plot(column='Produksi Padi - Produksi Padi (ton) (Ton)', cmap='YlGn', legend=True, edgecolor='black')
plt.title("Peta Produksi Padi per Provinsi - 2024")
plt.axis('off')
plt.tight_layout()
plt.show()
66666666666666666666666
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt

# Load GeoJSON dan data produksi
gdf = gpd.read_file("D:/indonesia-province.json")
produksi = pd.read_excel("D:/Produksi Padi dan Beras Menurut Provinsi, 2024.xlsx")

# Normalisasi kolom provinsi agar bisa digabungkan
gdf['Propinsi'] = gdf['Propinsi'].str.strip().str.lower()
produksi['Provinsi'] = produksi['Provinsi'].str.strip().str.lower()

# Gabungkan
merged = gdf.merge(produksi, left_on='Propinsi', right_on='Provinsi')

# Klasifikasi Produksi Padi: Rendah, Sedang, Tinggi
quantiles = merged['Produksi Padi - Produksi Padi (ton) (Ton)'].quantile([0.33, 0.66])
def klasifikasi_produksi(val):
    if val <= quantiles[0.33]:
        return 'Rendah'
    elif val <= quantiles[0.66]:
        return 'Sedang'
    else:
        return 'Tinggi'

merged['Kategori Produksi'] = merged['Produksi Padi - Produksi Padi (ton) (Ton)'].apply(klasifikasi_produksi)

# Visualisasi Peta Berdasarkan Kategori Produksi
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
color_dict = {'Rendah': 'lightcoral', 'Sedang': 'gold', 'Tinggi': 'forestgreen'}
merged.plot(ax=ax, column='Kategori Produksi', categorical=True, legend=True,
            legend_kwds={'title': "Kategori Produksi Padi"},
            color=merged['Kategori Produksi'].map(color_dict), edgecolor='black')

from matplotlib.patches import Patch

legend_elements = [
    Patch(facecolor='lightcoral', edgecolor='black',
          label='Rendah (≤ {:,.0f} ton)'.format(quantiles[0.33])),
    Patch(facecolor='gold', edgecolor='black',
          label='Sedang (> {:,.0f} – ≤ {:,.0f} ton)'.format(quantiles[0.33], quantiles[0.66])),
    Patch(facecolor='forestgreen', edgecolor='black',
          label='Tinggi (> {:,.0f} ton)'.format(quantiles[0.66]))
]

plt.legend(handles=legend_elements, loc='lower left', title='Keterangan')
plt.title("Peta Klasifikasi Produksi Padi per Provinsi - 2024")
plt.axis('off')
plt.tight_layout()
plt.savefig("D:/peta_klasifikasi_produksi_padi_2024.png", dpi=300)
plt.show()

print("✅ Peta klasifikasi produksi disimpan di: D:/peta_klasifikasi_produksi_padi_2024.png")
777777777777777777
from matplotlib.patches import Patch

legend_elements = [
    Patch(facecolor='lightcoral', edgecolor='black', label='Rendah (≤ {:.0f} ha)'.format(quantiles[0.33])),
    Patch(facecolor='gold', edgecolor='black', label='Sedang (> {:.0f} – ≤ {:.0f} ha)'.format(quantiles[0.33], quantiles[0.66])),
    Patch(facecolor='forestgreen', edgecolor='black', label='Tinggi (> {:.0f} ha)'.format(quantiles[0.66]))
]

fig, ax = plt.subplots(1, 1, figsize=(12, 8))
merged.plot(ax=ax,
            column='Kategori_Luas_Panen',
            color=merged['Kategori_Luas_Panen'].map(colors),
            edgecolor='black')

plt.title("Peta Kategori Luas Panen Padi per Provinsi - 2025")
plt.axis('off')
plt.legend(handles=legend_elements, loc='lower left', title='Keterangan')
plt.tight_layout()
plt.savefig("D:/peta_kategori_luas_panen_2025_dengan_keterangan.png", dpi=300)
plt.show()
888888888888888888888888888
import pandas as pd

# --- 1. Baca file Excel ---
file_path = "D:/inflasi harga konsumenn.xlsx"  # Ganti dengan nama file Anda

# Sheet: Inflasi (baris ke-3 adalah header sebenarnya)
indo_df = pd.read_excel(file_path, sheet_name="indo", header=2)

# Sheet: GKP & Beras
gkp_df = pd.read_excel(file_path, sheet_name="inflasi harga konsumen", header=1)
beras_df = pd.read_excel(file_path, sheet_name="BERAS", header=1)

# --- 2. Standarkan kolom ---
indo_df = indo_df.rename(columns={indo_df.columns[0]: "Bulan"})
gkp_df = gkp_df.rename(columns={gkp_df.columns[0]: "Bulan"})
beras_df = beras_df.rename(columns={beras_df.columns[0]: "Bulan"})

# --- 3. Filter kolom yang valid (Bulan + Tahun) ---
def get_valid_columns(df):
    return ['Bulan'] + [col for col in df.columns if isinstance(col, int) or str(col).isdigit()]

indo_df = indo_df[get_valid_columns(indo_df)]
gkp_df = gkp_df[get_valid_columns(gkp_df)]
beras_df = beras_df[get_valid_columns(beras_df)]

# --- 4. Ubah format ke long (reshape) ---
def melt_long(df, value_name):
    df_melt = df.melt(id_vars="Bulan", var_name="Tahun", value_name=value_name)
    df_melt["Tahun"] = df_melt["Tahun"].astype(int)
    df_melt["Bulan"] = df_melt["Bulan"].astype(str).str.strip().str.capitalize()
    return df_melt

inflasi_final = melt_long(indo_df, "Inflasi (%)")
gkp_final = melt_long(gkp_df, "Harga GKP (Rp/kg)")
beras_final = melt_long(beras_df, "Harga Beras (Rp/kg)")

# --- 5. Gabungkan semua data ---
merged_df = inflasi_final.merge(gkp_final, on=["Tahun", "Bulan"], how="inner") \
                         .merge(beras_final, on=["Tahun", "Bulan"], how="inner")

# --- 6. Urutkan data berdasarkan Tahun dan Bulan ---
bulan_order = [
    "Januari", "Februari", "Maret", "April", "Mei", "Juni",
    "Juli", "Agustus", "September", "Oktober", "November", "Desember"
]
merged_df["Bulan"] = pd.Categorical(merged_df["Bulan"], categories=bulan_order, ordered=True)
merged_df = merged_df.sort_values(by=["Tahun", "Bulan"]).reset_index(drop=True)

# --- 7. Tampilkan hasil akhir ---
print(merged_df.head(10))

# (Opsional) Simpan ke Excel
# merged_df.to_excel("hasil_gabungan.xlsx", index=False)
9999999999999999999999999
# Korelasi Pearson
corr_gkp = merged_df["Inflasi (%)"].corr(merged_df["Harga GKP (Rp/kg)"])
corr_beras = merged_df["Inflasi (%)"].corr(merged_df["Harga Beras (Rp/kg)"])

print(f"Korelasi Inflasi - Harga GKP  : {corr_gkp:.4f}")
print(f"Korelasi Inflasi - Harga Beras: {corr_beras:.4f}")
00000000000000000000000000
import matplotlib.pyplot as plt
import pandas as pd

# Mapping nama bulan dari Indonesia ke Inggris
bulan_map = {
    "Januari": "January", "Februari": "February", "Maret": "March", "April": "April",
    "Mei": "May", "Juni": "June", "Juli": "July", "Agustus": "August",
    "September": "September", "Oktober": "October", "November": "November", "Desember": "December"
}

# Pastikan tipe string
merged_df["Bulan_EN"] = merged_df["Bulan"].map(bulan_map).astype(str)
merged_df["Tahun"] = merged_df["Tahun"].astype(str)

# Gabungkan Tahun-Bulan jadi datetime
merged_df["Tanggal"] = pd.to_datetime(
    merged_df["Tahun"] + "-" + merged_df["Bulan_EN"],
    format="%Y-%B"
)

# Plot tren inflasi dan harga
plt.figure(figsize=(12, 6))
plt.plot(merged_df["Tanggal"], merged_df["Inflasi (%)"], label="Inflasi (%)", color='red')
plt.plot(merged_df["Tanggal"], merged_df["Harga GKP (Rp/kg)"], label="Harga GKP", color='green')
plt.plot(merged_df["Tanggal"], merged_df["Harga Beras (Rp/kg)"], label="Harga Beras", color='blue')

plt.title("Tren Inflasi & Harga GKP/Beras per Bulan")
plt.xlabel("Waktu")
plt.ylabel("Nilai")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
1111111111111111111111
# Hitung perubahan bulanan harga beras
merged_df["Delta Beras"] = merged_df["Harga Beras (Rp/kg)"].diff()
threshold = merged_df["Delta Beras"].std() * 2  # Anomali = perubahan > 2x standar deviasi

anomali = merged_df[merged_df["Delta Beras"].abs() > threshold]
print("📌 Anomali Detected (Lonjakan Harga Beras):")
print(anomali[["Tahun", "Bulan", "Harga Beras (Rp/kg)", "Delta Beras"]])
22222222222222222222222
from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib.pyplot as plt

# Siapkan variabel
X = merged_df[["Inflasi (%)"]].values
y = merged_df["Harga Beras (Rp/kg)"].values

# Buang baris dengan NaN
mask = ~np.isnan(X).flatten() & ~np.isnan(y)
X = X[mask]
y = y[mask]

# Model regresi
model = LinearRegression()
model.fit(X, y)

# Koefisien
print(f"Intercept     : {model.intercept_:.2f}")
print(f"Koefisien β₁ : {model.coef_[0]:.2f}")
print(f"R² Skor Model : {model.score(X, y):.4f}")

# Visualisasi
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label='Data Aktual')
plt.plot(X, model.predict(X), color='red', label='Regresi Linier')
plt.title("Regresi: Inflasi vs Harga Beras")
plt.xlabel("Inflasi (%)")
plt.ylabel("Harga Beras (Rp/kg)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
33333333333333333333
# Hitung prediksi dan residual
y_pred = model.predict(X)
residuals = y - y_pred

# Plot residual
plt.figure(figsize=(8, 5))
plt.scatter(y_pred, residuals, color='purple')
plt.axhline(0, color='black', linestyle='--')
plt.xlabel("Prediksi Harga Beras (Rp/kg)")
plt.ylabel("Residual (Error)")
plt.title("Plot Residual")
plt.grid(True)
plt.tight_layout()
plt.show()
4444444444444444444444
import seaborn as sns
import scipy.stats as stats

plt.figure(figsize=(8, 5))
sns.histplot(residuals, kde=True, color="orange")
plt.title("Distribusi Residual")
plt.xlabel("Residual")
plt.grid(True)
plt.tight_layout()
plt.show()

# Tambahkan Q-Q plot
plt.figure(figsize=(6, 6))
stats.probplot(residuals, dist="norm", plot=plt)
plt.title("Q-Q Plot Residual")
plt.grid(True)
plt.tight_layout()
plt.show()

55555555555555555555
# Buang kolom target dari X
X = merged_df.select_dtypes(include='number').drop(columns=["Harga Beras (Rp/kg)"])
y = merged_df["Harga Beras (Rp/kg)"]

# Hapus baris dengan NaN (opsi sederhana)
X = X.dropna()
y = y.loc[X.index]
from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X, y)

# Print koefisien
print("Intercept :", model.intercept_)
print("\nKoefisien:")
for col, coef in zip(X.columns, model.coef_):
    print(f"{col:<30}: {coef:.2f}")

# R^2 score
print(f"\nR² Skor Model: {model.score(X, y):.4f}")
6666666666666666
# Bar chart koefisien
plt.figure(figsize=(10, 6))
coef_df = pd.Series(model.coef_, index=X.columns)
coef_df.sort_values().plot(kind='barh', color='teal')
plt.title("Pengaruh Masing-Masing Variabel terhadap Harga Beras")
plt.xlabel("Koefisien Regresi")
plt.grid(True)
plt.tight_layout()
plt.show()
7777777777777777777777
y_pred = model.predict(X)
residuals = y - y_pred

# Plot residual vs prediksi
plt.figure(figsize=(8, 5))
plt.scatter(y_pred, residuals, color='crimson')
plt.axhline(0, color='black', linestyle='--')
plt.xlabel("Prediksi Harga Beras (Rp/kg)")
plt.ylabel("Residual")
plt.title("Residual vs Prediksi Harga Beras")
plt.grid(True)
plt.tight_layout()
plt.show()
888888888888888888888
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import r2_score, mean_squared_error

# Misalnya `merged_df` sudah tersedia
# Pastikan kolom berikut ada dan tidak ada NaN
df = merged_df[["Inflasi (%)", "Harga Beras (Rp/kg)"]].dropna()

# Split fitur dan target
X = df[["Inflasi (%)"]]
y = df["Harga Beras (Rp/kg)"]

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(random_state=42)
}

# Evaluasi masing-masing model
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    results[name] = {"R2": r2, "RMSE": rmse}
    print(f"{name} — R2: {r2:.3f}, RMSE: {rmse:.2f}")

# Visualisasi hasil prediksi vs aktual
plt.figure(figsize=(10, 6))
for name, model in models.items():
    y_pred = model.predict(X_test)
    plt.scatter(y_test, y_pred, label=name)

plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
plt.xlabel("Harga Beras Aktual (Rp/kg)")
plt.ylabel("Prediksi Harga Beras")
plt.title("Perbandingan Model: Aktual vs Prediksi")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
999999999999999999
from xgboost import XGBRegressor
from sklearn.svm import SVR

# Tambahkan model XGBoost dan SVR ke dalam dictionary model
models.update({
    "XGBoost": XGBRegressor(random_state=42, objective='reg:squarederror'),
    "SVR (RBF)": SVR(kernel='rbf')
})

# Evaluasi ulang semua model termasuk XGBoost dan SVR
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    results[name] = {"R2": r2, "RMSE": rmse}
    print(f"{name} — R2: {r2:.3f}, RMSE: {rmse:.2f}")

# Visualisasi ulang dengan model baru
plt.figure(figsize=(10, 6))
for name, model in models.items():
    y_pred = model.predict(X_test)
    plt.scatter(y_test, y_pred, label=name, alpha=0.6)

plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
plt.xlabel("Harga Beras Aktual (Rp/kg)")
plt.ylabel("Prediksi Harga Beras")
plt.title("Perbandingan Model: Aktual vs Prediksi")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
000000000000000000000
# Tampilkan nama kolom untuk verifikasi
print(merged_df.columns.tolist())

# Hapus spasi tersembunyi jika ada
merged_df.columns = merged_df.columns.str.strip()

# Setelah yakin nama kolom benar
X = merged_df[["Inflasi (%)"]]
y = merged_df["Harga Beras (Rp/kg)"]
merged_df[["Inflasi (%)", "Harga Beras (Rp/kg)"]].head()
# SVR Pipeline (butuh scaling)
svr_pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('svr', SVR(kernel='rbf'))
])

# XGBoost Pipeline (tanpa scaling)
xgb_pipeline = Pipeline([
    ('xgb', XGBRegressor(objective='reg:squarederror', random_state=42))
])
def evaluate_model(name, model, X_train, y_train):
    scores = cross_val_score(model, X_train, y_train, scoring='r2', cv=5)
    print(f"{name} - Mean R² (CV): {scores.mean():.3f} ± {scores.std():.3f}")
    return scores

evaluate_model("SVR", svr_pipeline, X_train, y_train)
evaluate_model("XGBoost", xgb_pipeline, X_train, y_train)
111111111111111

# Train & Save
svr_pipeline.fit(X_train, y_train)
xgb_pipeline.fit(X_train, y_train)

# Save to file
joblib.dump(svr_pipeline, "model_svr.pkl")
joblib.dump(xgb_pipeline, "model_xgb.pkl")
# Predict
y_pred_svr = svr_pipeline.predict(X_test)
y_pred_xgb = xgb_pipeline.predict(X_test)

# Metrics
for name, y_pred in [("SVR", y_pred_svr), ("XGBoost", y_pred_xgb)]:
    print(f"{name} — R²: {r2_score(y_test, y_pred):.3f}, RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.2f}")

# Plot
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_svr, label="SVR", alpha=0.6)
plt.scatter(y_test, y_pred_xgb, label="XGBoost", alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--')
plt.xlabel("Harga Beras Aktual")
plt.ylabel("Prediksi")
plt.title("Prediksi Harga Beras")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
